/** * @author  */using("System.Dom.Base");var DOM = (function(){		var dp = Dom.prototype;	var lp = DomList.prototype;		Object.each({			attr: 0,			css: 'style'				}, function(value, key) {			value = (value || key).capitalize();		var getter = 'get' + value;		var setter = 'set' + value;					dp[key] = lp[key] = function(key, value) {			if(value === undefined){				if(Object.isObject(key)) {					for(value in key){						this[setter](key, key[value]);						}										return this;				}				return this[getter](key);			}			return this[setter](key, value);		};			});		Object.each({			html: 0,		width: 0,			height: 0,			offset: 0,			position: 0,			val: 'text',			text: 0				}, function(value, key) {			value = (value || key).capitalize();		var getter = 'get' + value;		var setter = 'set' + value;					dp[key] = lp[key] = function(value) {			if(value === undefined){				return this[getter](key);			}			return this[setter](key);		};			});		Object.each(Dom.$event, function(value, eventName){		dp[eventName] = lp[eventName] = function(handler) {						return Object.isFunction(handler) ? this.on(eventName, handler) : 				Object.isFunction(this[eventName]) ? this[eventName](handler) : 				this.trigger(eventName, handler);		};	});		dp.live = lp.live = function(eventName, handler){		if(Object.isObject(eventName)) {			for(handler in eventName){				this.live(eventName, eventName[handler]);			}			return this;		}				document.delegate(this.selector, eventName, handler);		return this;	};		return {				query: function(selector) {			var nodelist = Dom.query(selector);			nodelist.selector = selector;			return nodelist;		},				get: function(id) {			var node = Dom.getNode(id);			return node ? new DomList([node]) : new DomList();		}			};		})();var $ = DOM.query;var $$ = DOM.get;