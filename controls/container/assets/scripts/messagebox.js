/** * @author  xuld */imports("Controls.Container.MessageBox");using("Controls.Container.Dialog");var MessageBox = Dialog.extend({			init: function(dom){		this.base('init');				this.base('setHtml', '<div class="x-dialog-content-text"></div>\			<div class="x-dialog-buttons">\				<a class="x-button x-button-ok"><span class="x-icon x-icon-ok"></span>确定</a>\			</div>');		this.content = this.find('.x-dialog-content-text');		this.setWidth(400).addClass('x-messagebox');				this.find('.x-button-ok').on('click', this.onOk, this);	},		setIcon: function(type){		this.content.dom.className = type ? 'x-dialog-content x-dialog-content-' + type : '';		return this;	},		/**	 * 设置按钮。	 * options：	 * {文字： true} ->  确定按钮	 * {文字： false} ->  取消按钮	 * {文字： func} ->  自定义按钮	 */	setButtons: function(options){		this.find('.x-dialog-buttons').empty();				for(var text in options){			var html='';			if(options[text] === false){				html = '<a class="x-button x-button-cancel" style="margin-right: 9px;">' + text + '</a>';			}else{				html = '<a class="x-button x-button-ok"><span class="x-icon x-icon-ok"></span>' + text + '</a>';			}			var btn = this.find('.x-dialog-buttons').append(html);						if(typeof options[text] == 'boolean'){				btn.on('click', options[text] ? this.onOk : this.onCancel, this);			} else {				btn.on('click', options[text], this);			}		}								return this;	},		setHtml: function(text){		this.content.setHtml(text);		return this;	},		getHtml: function(){		return this.content.getHtml();	},		setText: function(text){		this.content.setText(text);		return this;	},		getText: function(){		return this.content.getText();	},	onOk: function(){		if(this.trigger('ok'))			this.hide();	},		onCancel: function(){		if(this.trigger('cancel'))			this.hide();	},	});Object.extend(MessageBox,{	instance: null,		createInstance: function(){		this.instance = new MessageBox();				return this.instance;	},		alert: function(title, message, onOK,type){		var instance = this.instance || this.createInstance();				title = title||'提示';			message = message||'';		instance.setTitle(title);		instance.setHtml(message);		if(onOK)			instance.un('ok').on('ok', onOK);		if(type)			instance.find('.x-dialog-content-text').addClass('x-dialog-'+type);		return instance.showDialog();			},		confirm: function(title, message, onOK,onCancel,type){		var instance = this.instance || this.createInstance();				var title = title||'提示',			message = message||'';		instance.setTitle(title);		instance.setHtml(message);		instance.setButtons({'确定': true, '取消': false})		if(onOK)			instance.un('ok').on('ok', onOK);		if(onCancel)			instance.un('cancel').on('cancel', onCancel);		if(type)			instance.find('.x-dialog-content-text').addClass('x-dialog-'+type);				return instance.showDialog();	},		open: function(title, message, buttons){		var instance = new CommonFaceDialog();				if(message === undefined) {			message = title;			title = '提示';		}						instance.setTitle(title);		instance.setHtml(message);		instance.setButtons(buttons)							return instance.showDialog();	},		close: function(){		if(this.instance)			this.instance.hide();	},		tip: function(text,type,time){		type = type || 'success';		text = text || '成功！';		time = time || 1500;		var tipFaceDialog = new TipFaceDialog();		return tipFaceDialog.setText(text).setIcon(type).show(time);	}	});