/** * @author  xuld */imports("Controls.Button.Button");imports("Controls.Button.MenuButton");imports("Controls.Form.Picker");using("Controls.Core.IInput");using("Controls.Core.IDropDownOwner");/** * 表示一个数据选择器。 * @abstract class * @extends Control */var Picker = Control.extend(IInput).implement(IDropDownOwner).implement({		tpl: '<span class="x-picker">\			<input type="text" class="x-textbox"/>\		</span>',		dropDownListTpl: '<span class="x-picker">\			<a href="javascript:;" class="x-button">A</a>\		</span>',			menuButtonTpl: '<button class="x-button" type="button"><span class="x-button-menu"></span></button>',		/**	 * 当前控件是否为下拉列表。	 */	dropDownList: false,		/**	 * 下拉框的宽度。	 */	dropDownWidth: 'auto',		/**	 * @config dropDownList 是否允许用户输入自定义的文本值。	 */		create: function(options){		return Dom.parseNode(options.dropDownList ? this.dropDownListTpl : this.tpl);	},		/**	 * 获取当前输入域实际用于提交数据的表单域。	 * @return {Dom} 一个用于提交表单的数据域。	 */	input: function(){				// 如果不存在隐藏域。		if(!this.hiddenField) {						var textBox = this.find('.x-textbox');						if(textBox){				return textBox;				}						this.hiddenField = Dom.parse('<input type="hidden">').appendTo(this);			this.hiddenField.setAttr('name', Dom.getAttr(this.node, 'name'));		}				return this.hiddenField;	},		/**	 * 获取当前控件的按钮部分。	 */	button: function(){		return this.find('button');	},		/**	 * @protected	 * @override	 */	init: function(){				// 如果是 <input> 或 <a> 直接替换为 x-picker		if(!this.first() && !this.hasClass('x-picker')) {			var elem = this.node;						// 创建 x-picker 组件。			this.node = Dom.createNode('span', 'x-picker x-' + this.xtype);						// 替换当前节点。			if(elem.parentNode){				elem.parentNode.replaceChild(this.node, elem);			}						// 插入原始 <input> 节点。			this.prepend(elem);		}				// 如果没有下拉菜单按钮，添加之。		if(!this.button()) {			this.append(this.menuButtonTpl);			}				// 初始化菜单。		elem = this.next();		if(elem && !elem.hasClass('x-dropdown')) {			elem = null;		}		this.setDropDown(this.createDropDown(elem));				// 设置菜单显示的事件。		(this.dropDownList ? this : this.button()).on('click', this.toggleDropDown, this);			},		setWidth: function(value){		var first = this.first();		if(value >= 0){			value -= this.getWidth() - first.getWidth();		}		first.setWidth(value);		return this;	},		disabled: function(value){		value = value !== false;				// 子节点全部设置样式。		this.children().setAttr("disabled", value);				// 为按钮增加 disabled 样式。		this.query('.x-textbox').toggleClass("x-textbox-disabled", value);				// 为按钮增加 disabled 样式。		this.query('.x-button').toggleClass("x-button-disabled", value);	},		readOnly: function(value){				value = value !== false;				// 子节点全部设置样式。		this.input().setAttr("readonly", value);				// 为按钮增加 disabled 样式。		this.query('.x-textbox').toggleClass("x-textbox-readonly", value);	},		// 下拉菜单		onDropDownShow: function(){		// 默认选择当前值。		this.updateDropDown();		this.button().addClass('x-button-actived');		return IDropDownOwner.onDropDownShow.apply(this, arguments);	},		onDropDownHide: function(){		this.button().removeClass('x-button-actived');		return IDropDownOwner.onDropDownHide.apply(this, arguments);	},		/**	 * 创建当前 Picker 的菜单。	 * @return {Control} 下拉菜单。	 */	createDropDown: function(existDom){		return existDom || Dom.parse('<div/>');	},		/**	 * 将当前文本的值同步到下拉菜单。	 * @protected virtual	 */	updateDropDown: Function.empty	}).addEvents('change', {	add: function(picker, type, fn){		Dom.$event.$default.add(picker.input(), type, fn);	},	remove: function(picker, type, fn){		Dom.$event.$default.remove(picker.input(), type, fn);	}});