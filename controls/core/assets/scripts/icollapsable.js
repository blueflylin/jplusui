/** * @author  xuld */using("System.Fx.Animate");/** * 表示一个可折叠的控件。 * @interface ICollapsable */var ICollapsable = {		/**	 * 获取目前是否折叠。	 * @virtual	 * @return {Boolean} 获取一个值，该值指示当前面板是否折叠。	 */	isCollapsed: function() {		var container = this.container ? this.container() : this;		return !container || Dom.isHidden(container.node);	},		onCollapsing: function(duration){		return this.trigger('collapsing', duration);	},		onExpanding: function(duration){		return this.trigger('expanding', duration);	},		onCollapse: function(){		this.trigger('collapse');	},		onExpand: function(){		this.trigger('expand');	},	/**	 * 折叠面板。	 * @param {Number} duration 折叠效果使用的时间。	 */	collapse: function(duration){		var me = this, 			container,			callback;		if(me.onCollapsing(duration) !== false && (container = me.container ? me.container() : me)) {			callback = function(){				me.addClass('x-' + me.xtype + '-collapsed');				me.onCollapse();			};						// 如果不加参数，使用同步方式执行。			if(duration === undefined){				container.hide();				callback();			} else {				container.hide('height', duration, callback, 'ignore');			}		}		return me;	},	/**	 * 展开面板。	 * @param {Number} duration 折叠效果使用的时间。	 */	expand: function(duration){		if(this.onExpanding(duration) !== false) {			var container = this.container ? this.container() : this;			if(container) {				this.removeClass('x-' + this.xtype + '-collapsed');				if(duration === undefined){					container.show();					this.onExpand();				} else {					container.show('height', duration, this.onExpand.bind(this), 'ignore');				}			}		}		return this;	},		/**	 * 切换面板的折叠。	 * @param {Number} duration 折叠效果使用的时间。	 */	toggleCollapse: function(duration) {		return this[this.isCollapsed() ? 'expand' : 'collapse'](duration);	}	};