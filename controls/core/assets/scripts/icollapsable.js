/** * @author  xuld */using("System.Fx.Animate");/** * 表示一个可折叠的控件。 * @interface ICollapsable */var ICollapsable = {		/**	 * 获取目前是否折叠。	 * @virtual	 * @return {Boolean} 获取一个值，该值指示当前面板是否折叠。	 */	isCollapsed: function() {		var container = this.container ? this.container() : this;		return container && Dom.isHidden(container.node);	},		onCollapsing: function(duration){		return this.trigger('collapsing', duration);	},		onExpanding: function(duration){		return this.trigger('expanding', duration);	},		onCollapse: function(){		this.trigger('collapse');	},		onExpand: function(){		this.trigger('expand');	},	/**	 * 折叠面板。	 * @param {Number} duration 折叠效果使用的时间。	 */	collapse: function(duration){		var me = this, 			container = me.container ? me.container() : me;		if(container && me.onCollapsing(duration) !== false) {			container.hide('height', duration, function(){				me.addClass('x-' + me.xtype + '-collapsed');				me.onCollapse();			}, 'ignore');		}		return this;	},	/**	 * 展开面板。	 * @param {Number} duration 折叠效果使用的时间。	 */	expand: function(duration){		var container = this.container ? this.container() : this;		if(container && this.onExpanding(duration) !== false) {			this.removeClass('x-' + this.xtype + '-collapsed');			container.show('height', duration, this.onExpand.bind(this), 'ignore');		}		return this;	},		/**	 * 切换面板的折叠。	 * @param {Number} duration 折叠效果使用的时间。	 */	toggleCollapse: function(duration) {		return this.isCollapsed() ? this.expand(duration) : this.collapse(duration);	}	};