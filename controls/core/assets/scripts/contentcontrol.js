/** * @fileOverview 表示一个包含文本内容的控件。 * @author xuld *//** * 表示一个有内置呈现的控件。 * @abstract * @class ContentControl * @extends Control *  * <p> * 这个控件同时允许在子控件上显示一个图标。 * </p> *  * <p> * ContentControl 的外元素是一个根据内容自动改变大小的元素。它自身没有设置大小，全部的大小依赖子元素而自动决定。 * 因此，外元素必须满足下列条件的任何一个: *  <ul> * 		<li>外元素的 position 是 absolute<li> * 		<li>外元素的 float 是 left或 right <li> * 		<li>外元素的 display 是  inline-block (在 IE6 下，使用 inline + zoom模拟) <li> *  </ul> * </p> */var ContentControl = Control.extend({		/**	 * 获取当前显示的图标。	 * @getter {Control} icon	 * @proected	 */		icon: function(){		return this.find('.x-icon');	},		/**	 * 获取当前控件中显示文字的主 DOM 对象。	 */	content: function(){		return this.last(true) || this;	},		/**	 * 当被子类改写时，实现创建添加和返回一个图标节点。	 * @protected	 * @virtual	 */	createIcon: function(){		return this.content().prepend(Dom.create('i', 'x-icon'));	},		getIcon: function(){		var icon = this.icon();		return icon ? (/x-icon-(.*?)\b/.test(icon.node.className) || [0, ""])[1] : null;	},		/**	 * 设置图标。	 * @param {String} icon 图标。	 * @return {Panel} this	 */	setIcon: function(icon) {				if(icon != null){			(this.icon() || this.createIcon()).node.className = "x-icon x-icon-" + icon;		} else if(icon = this.icon()) {			icon.remove();		}				return this;	},		setText: function(value){		Dom.prototype.setText.call(this.content(), value);		return this;	},		getText: function(){		return Dom.getText(this.content().node);	}	});