/** * @author  xuld */using("Controls.Core.ContentControl");using("Controls.Core.ListControl");/** * 表示一个树结构的子组件。 */var TreeControl = ListControl.extend({		/**	 * 将已有的 DOM 节点转为 {@link TreeControl.Item} 对象。	 * @param {Dom} childControl 要转换的 DOM 对象。	 * @param {Dom} parent=null DOM 对象的父节点。	 * @protected virtual	 */	createTreeItem: function(childControl, parent) {		return new TreeControl.Item(childControl);	},		/**	 * 初始化一个 <li> 对象。	 * @private	 */	initItemContainer: function(li){			// 获取第一个子节点。		var subControl = li.find('>ul'),			item = (subControl ? (subControl.prev() || subControl.prev(true)) : (li.first() || li.first(true))) || Dom.parse('');				// 根据节点创建一个 MenuItem 对象。		item = this.createTreeItem(item, li);		// 如果存在子菜单，设置子菜单。		if (subControl) {			item.setSubControl(subControl);		}				// 保存 li -> childControl 的关联。		li.dataField().namedItem = item;				return item;	},		/**	 * 处理一个子控件。	 * @protected override	 */	initChild: function(childControl){				// 如果是添加 <li> 标签，则直接返回。		// .add('<li></li>')		if (childControl.node.tagName === 'LI') {						this.initItemContainer(childControl);			// .add(new MenuItem())		} else {						// 转为 MenuItem 对象。			// .add(文本或节点)			var item = this.createTreeItem(childControl);						// 创建一个新的容器节点。			childControl = Dom.create('LI', 'x-' + this.xtype + '-item');						// 复制节点。			childControl.append(item);							// 保存 li -> childControl 的关联。			childControl.dataField().namedItem = item;		}		return childControl;	},		/**	 * 初始化 DOM 中已经存在的项。 	 * @protected override	 */	initItems: function(){		for(var c = this.first(); c; c = c.next()){			this.initItemContainer(c).parentControl = this;		}	}});/** * 表示 TreeControl 中的一项。 */TreeControl.Item = ContentControl.extend({		tpl: '<a class="x-control"></a>',		/**	 * 获取当前菜单管理的子菜单。	 * @type {TreeControl}	 */	subControl: null,		/**	 * 当被子类重写时，用于创建子树。	 * @param {TreeControl} treeControl 要初始化的子树。	 * @return {TreeControl} 新的 {@link TreeControl} 对象。	 * @protected virtual	 */	createSubControl: function(control){		return new TreeControl(control);	},		/**	 * 当被子类重写时，用于初始化子树。	 * @param {TreeControl} treeControl 要初始化的子树。	 * @protected virtual	 */	initSubControl: Function.empty,		/**	 * 当被子类重写时，用于删除初始化子树。	 * @param {TreeControl} treeControl 要删除初始化的子树。	 * @protected virtual	 */	uninitSubControl: Function.empty,		/**	 * 获取当前项的子树控件。 	 */	getSubControl: function(){		if(!this.subControl){			this.setSubControl(this.createSubControl());		}		return this.subControl;	},		/**	 * 设置当前项的子树控件。	 */	setSubControl: function(treeControl) {		if (treeControl) {						if(!(treeControl instanceof TreeControl)){				treeControl = this.createSubControl(treeControl);				}						// 如果子控件不在 DOM 树中，插入到当前节点后。			if (!treeControl.parent('body') && this.node.parentNode) {				this.node.parentNode.appendChild(treeControl.node);			}					this.subControl = treeControl;			this.initSubControl(treeControl);		} else if(this.subControl){			this.subControl.remove();			this.uninitSubControl(this.subControl);			this.subControl = null;		}		return this;	},	attach: function(parentNode, refNode) {				// 如果有关联的容器，先添加容器。		var subControl = this.subControl;		if (subControl && !subControl.parent('body')) {			parentNode.insertBefore(subControl.node, refNode);		}		parentNode.insertBefore(this.node, refNode);	},	detach: function(parentNode) {				if(this.node.parentNode === parentNode) {			parentNode.removeChild(this.node);		}				// 如果有关联的容器，删除容器。		var subControl = this.subControl;		if (subControl) {			parentNode.removeChild(subControl.node);		}	},		setAttr: function(name, value) {		if(/^(selected|checked|disabled)$/i.test(name)){			return this[name.toLowerCase()](value);		}		return Dom.prototype.setAttr.call(this, name, value);	},	/**	 * 切换显示鼠标是否移到当前项。	 */	hovering: function(value){		return this.toggleClass('x-' + this.xtype + '-hover', value);	}});ListControl.aliasMethods(TreeControl.Item, 'getSubControl()', 'subControl');Object.map("selected checked disabled", function(funcName) {	TreeControl.Item.prototype[funcName] = function(value) {		this.toggleClass('x-' + this.xtype + '-' + funcName, value);		return Dom.prototype.setAttr.call(this, funcName, value);	};});