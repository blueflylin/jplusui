/** * @author  xuld */using("Controls.Core.IDropDownOwner");using("Controls.Button.Button");using("Controls.Button.Menu");var MenuButton = Button.extend(IDropDownOwner).implement({		xtype: 'menubutton',		tpl: '<button class="x-button x-control" type="button">&nbsp;<span class="x-button-menu"></span></button>',		content: function(){		return this.find('.x-button-menu').prev(true);	},		createDropDown: function(existDom){		if(existDom && !existDom.hasClass('x-menu')){			return existDom;		}		return new Menu(existDom).on('click', this.onDropDownClick, this);	},		init: function () {		var next = this.next();		this.setDropDown(this.createDropDown(next && next.hasClass('x-dropdown') ? next : null));		this.on('click', this.toggleDropDown, this);	},		onDropDownShow: function(){		this.actived(true);		return IDropDownOwner.onDropDownShow.apply(this, arguments);	},		onDropDownHide: function(){		this.actived(false);		return IDropDownOwner.onDropDownHide.apply(this, arguments);	},		onDropDownClick: function(){		this.hideDropDown();	}	});ListControl.aliasMethods(MenuButton, 'dropDown');