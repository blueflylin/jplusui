/** * @author  xuld */using("System.Fx.Animate");/** * 表示一个可折叠的控件接口。 * @interface ICollapsable * @remark ICollapsable 会对 #body() 节点（如果存在）进行折叠和展开效果。 */var ICollapsable = {    /**	 * 折叠效果的默认使用时间。如果为 0 表示无效果。	 * @type {Integer} 	 * @virtual	 */    collapseDuration: -1,		/**	 * 获取目前是否折叠。	 * @return {Boolean} 获取一个值，该值指示当前面板是否折叠。	 * @virtual	 */	isCollapsed: function() {	    var body = this.body ? this.body() : this;	    return !body || Dom.isHidden(body.node);	},    /**	 * 当控件即将被折叠时执行。     * @return {Boolean} 可以通过返回 false 来阻止事件继续执行。	 * @virtual	 */	onCollapsing: function(){		return this.trigger('collapsing');	},    /**	 * 当控件即将被展开时执行。     * @return {Boolean} 可以通过返回 false 来阻止事件继续执行。	 * @virtual	 */	onExpanding: function(){		return this.trigger('expanding');	},    /**	 * 当控件已经被折叠时执行。	 * @param {Number} duration 折叠效果使用的时间。	 * @virtual	 */	onCollapse: function(){		this.trigger('collapse');	},    /**	 * 当控件已经被展开时执行。	 * @param {Number} duration 折叠效果使用的时间。	 * @virtual	 */	onExpand: function(){		this.trigger('expand');	},	/**	 * 折叠面板。	 * @param {Integer} duration=#collapseDuration 折叠效果使用的时间。如果为 0 表示无效果。     * @return this	 */	collapse: function(duration){		var me = this, 			body,			callback;	    // 如果允许折叠，则继续执行。		if (me.onCollapsing() !== false && (body = me.body ? me.body() : me)) {            // 折叠完成的回调函数。		    callback = function () {				me.addClass('x-' + me.xtype + '-collapsed');				me.onCollapse();			};						// 如果不加参数，使用同步方式执行。			if(duration === 0){			    body.hide();				callback();			} else {			    body.hide('height', duration || this.collapseDuration, callback, 'ignore');			}		}		return me;	},	/**	 * 展开面板。	 * @param {Integer} duration=#collapseDuration 折叠效果使用的时间。如果为 0 表示无效果。     * @return this	 */	expand: function (duration) {        // 如果允许展开，则继续执行。	    if (this.onExpanding() !== false) {            // 获取主体内容。	        var body = this.body ? this.body() : this;            // 仅当存在主体内容时才执行操作。	        if (body) {				this.removeClass('x-' + this.xtype + '-collapsed');				if(duration === 0){				    body.show();					this.onExpand();				} else {				    body.show('height', duration || this.collapseDuration, this.onExpand.bind(this), 'ignore');				}			}		}		return this;	},		/**	 * 切换面板的折叠。	 * @param {Integer} duration=#collapseDuration 折叠效果使用的时间。如果为 0 表示无效果。     * @return this	 */	toggleCollapse: function(duration) {		return this[this.isCollapsed() ? 'expand' : 'collapse'](duration);	}	};