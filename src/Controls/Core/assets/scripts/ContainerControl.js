/** * @author  xuld */using("Controls.Core.ScrollableControl");/** * 所有容器控件的基类。 * @abstract class  * @extends ScrollableControl */var ContainerControl = ScrollableControl.extend({		tpl: '<div class="x-control">\			<div class="x-control-body"></div>\		</div>',	/**	 * 当被子类重写时，用于重写添加子控件的具体逻辑实现。	 * @param {Control} childControl 新添加的子控件。	 * @param {Control} refControl=null 用于表面添加的位置的子控件。指定控件会被插入到此控件之前。如果值为 null ，则添加到末尾。	 * @protected override	 */	doAdd: function(childControl, refControl) {		// 添加子节点到 content 容器。		childControl.attach(this.container().node, refControl ? refControl.node : null);	},	/** 	 * 当被子类重写时，用于重写删除子控件的具体逻辑实现。	 * @param {Control} childControl 要删除的子控件。	 * @protected override	 */	doRemove: function(childControl) {		// 在 content 容器删除节点。		childControl.detach(this.container().node);	},		/**	 * 获取当前容器控件的标题。	 * @return {Control}	 */	header: function(){		return this.find('.x-' + this.xtype + '-header');	},		/**	 * 获取当前容器控件的容器。	 * @getter {Control}	 */	container: function(){		return this.find('.x-' + this.xtype + '-body');	},		createHeader: function(){		return Dom.create('div', 'x-' + this.xtype + '-header').setHtml('<h2></h2>');	},		toggleHeader: function (value) {		if(this.header()){			if(!value) {				this.header().remove();			}		} else if(value && (value = this.createHeader())){			value.attach(this.node, this.node.firstChild);		}	},		getTitle: function(){		var header = this.header();		return header ? (header.find('h1, h2, h3, h4, h5, h6') || header.find('a') || header).getHtml() : null;	},		setTitle: function(value, valueAsText){		if(value != null){			this.toggleHeader(true);			var header = this.header();			(header.find('h1, h2, h3, h4, h5, h6') || header.find('a') || header)[valueAsText ? 'setText' : 'setHtml'](value);		} else {			this.toggleHeader(false);		}		return this;	},		setText: function(value){		this.empty().append(Dom.create('div', 'x-' + this.xtype + '-content')).setText(value);		return this;	},		getHtml: function(){		var first = this.container().first();		return (first.next() ? this.container() : first).getHtml();	},		setHtml: function(value){		this.empty().append(Dom.create('div', 'x-' + this.xtype + '-content')).setHtml(value);		return this;	}}).defineMethods('container()', 'getText first last children child empty');